This message implement two kind of socket io
all socket io on public/socket.io
For console log show example
http://jigsawye.com/2015/12/22/push-notification-to-user-in-laravel-5/
github on https://github.com/jigsawye/laravel-push-notification-demo
Listen Port 3000
1.) use Broadcast and event receive by socket io
   a.) it need php artisan queue:listen
   b.) it need note public/socketio
   c.) it implement on browser and need gulp to build in
   d.) it can use php artisan tinker to send command directly:event(new App\Events\PushNotification(App\User::first(), 'banana!'))
   e.) redis.subscribe('notification', function(err, count) {
	  console.log('connect!');
	});
	
	io.on('connection', function(socket) {
	  socket.on('set-token', function(token) {
	    console.log(token);
	    socket.join('token:' + token);
	  });
	});

	redis.on('message', function(channel, notification) {
	  console.log(notification);
	  notification = JSON.parse(notification);
	
	  io.emit('notification',  notification.data.message);
	});

http://itsolutionstuff.com/post/laravel-52-chat-message-module-using-socketio-redis-express-and-nodejs-from-from-scratchexample.htmli
github on https://github.com/savanihd/laravel52-socketio-redis-nodejs/blob/master/app/Http/Controllers/chatController.php
Listen Port 8890 server.js
1.) use <script src="https://cdn.socket.io/socket.io-1.3.4.js"></script>  to set message and use redis publish
    a.) redis publish use default redis database
    b.)use Illuminate\Support\Facades\Redis;
    c.)$data = ['message' =>$request->message, 'user' => $user->name];
		Redis::publish('message', json_encode($data));
		return response()->json([]);
    d.)io.on('connection', function (socket) {

       console.log("client connected");
       var redisClient = redis.createClient();
       redisClient.subscribe('message');
     
       redisClient.on("message", function(channel, data) {
         console.log(JSON.stringify(data, null, 2));
         socket.emit(channel, data);
       });
     
       socket.on('disconnect', function() {
         redisClient.quit();
       });
     
     });

